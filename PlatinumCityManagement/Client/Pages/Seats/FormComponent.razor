@inject HttpClient _client

<EditForm Model="@seat" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Seat no: </label>
			<div>
				<InputText @bind-Value="@seat.SeatNo" class="form-control" />
				<ValidationMessage For="@(() => seat.SeatNo)" />
			</div>
			<label>Screening Quality: </label>
			<div class="form-group">
				<label>Availability: </label>
				<InputCheckbox @bind-Value="@seat.SeatTaken" class="form-check-input" />
				<ValidationMessage For="@(() => seat.SeatTaken)" />
			</div>
			
			<label>Cinema Branch: </label>
			<div>
				<InputSelect @bind-Value="@seat.HallId" class="form-control">
					<option value="">-- Select hall  --</option>
					@if (Halls != null)
					{
						foreach (var hall in Halls)
						{
							<option value="@hall.Id">@hall.Name</option>
						}
					}
				</InputSelect>
				<ValidationMessage For="@(() => seat.HallId)" />
			</div>
		</div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
	<BackToList Target="seats" />

</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Seat? seat { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Hall>? Halls;

	protected async override Task OnInitializedAsync()
	{
		Halls = await _client.GetFromJsonAsync<List<Hall>>($"{Endpoints.HallsEndpoint}");
	}
}