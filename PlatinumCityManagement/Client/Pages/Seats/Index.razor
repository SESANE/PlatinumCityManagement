@page "/cinemaBranches/{cinemaBranchId:int}/halls/{hallId:int}/screenings/{screeningId:int}/seats/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor

@attribute [Authorize]

<h3 class="card-title">Seats</h3>
<input type="text" @bind-value="searchTerm" @bind-value:event="oninput" placeholder="Search by seat no" class="form-control mb-3" />


<a href="/cinemaBranches/@cinemaBranchId/halls/@hallId/screenings/@screeningId/seats/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Seat
</a>
<br />
<br />

@if (Seats == null)
{
    <div class="alert alert-info">Loading Seats...</div>
}
else
{
    <table class="table table-dark">
        <thead>
            <tr>
                <th>Seat No</th>
                <th>Seat Taken</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var seat in Seats.Where(s => string.IsNullOrEmpty(searchTerm) || s.SeatNo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            {
                if (seat.ScreeningId == screeningId)
                {
                    <tr>
                        <td>@seat.SeatNo</td>
                        <td>@seat.SeatTaken</td>
                        <td>
                            <a href="/cinemaBranches/@cinemaBranchId/halls/@hallId/screenings/@screeningId/seats/view/@seat.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/cinemaBranches/@cinemaBranchId/halls/@hallId/screenings/@screeningId/seats/edit/@seat.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(seat.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int cinemaBranchId { get; set; }
    [Parameter] public int hallId { get; set; }
    [Parameter] public int screeningId { get; set; }
    private List<Seat>? Seats;
    private string searchTerm;

    protected async override Task OnInitializedAsync()

    {
        Seats = await _client.GetFromJsonAsync<List<Seat>>($"{Endpoints.SeatsEndpoint}");
    }

    async Task Delete(int seatId)
    {
        if (Seats != null)
        {
            var seat = Seats.FirstOrDefault(q => q.Id == seatId);
            if (seat != null)
            {
                var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete Seat:{seat.SeatNo}?");
                if (confirm)
                {
                    try
                    {
                        var response = await _client.DeleteAsync($"{Endpoints.SeatsEndpoint}/{seatId}");
                        if (response.IsSuccessStatusCode)
                        {
                            Seats.Remove(seat);
                            StateHasChanged(); //refresh the UI
                        }
                        else
                        {
                            //handle the error, maybe show a message to the user
                            var error = await response.Content.ReadAsStringAsync();
                            Console.WriteLine(error);
                        }
                    }
                    catch (Exception ex)
                    {
                        //log or handle the exception
                        Console.WriteLine(ex.Message);
                    }
                }
            }
        }
    }
}