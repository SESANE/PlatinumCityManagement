@using PlatinumCityManagement.Client.Components
@inject HttpClient _client
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Screening  </label>
            <div>
                <InputSelect @bind-Value="booking.ScreeningId" class="form-control">
                    <option value="">-- Select screening --</option>
                    @if (Screenings != null)
                    {
                        foreach (var screening in Screenings)
                        {
                            <option value="@screening.Id">@screening.Movie.Title</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.ScreeningId)" />
            </div>
        </div>


        <div class="form-group">
            <label>Customer: </label>
            <div>

                <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Seat No: </label>
            <div>
                <InputSelect @bind-Value="booking.SeatId" class="form-control">
                    <option value="">-- Select seat --</option>
                    @if (Seats != null)
                    {
                        foreach (var seat in Seats.Where(c => c.ScreeningId == booking.ScreeningId))
                        {
                            <option value="@seat.Id">@seat.SeatNo</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Booking type (Student/Adult): </label>
            <div>
                <InputText @bind-Value="@booking.BookingType" class="form-control" />
                <ValidationMessage For="@(() => booking.BookingType)" />
            </div>
        </div>
        <br />
        <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="customers/bookings" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking? booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff>? Staffs;
    private IList<Customer>? Customers;
    private IList<Screening>? Screenings;
    private IList<Seat>? Seats;
    protected override async Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Screenings = await _client.GetFromJsonAsync<List<Screening>>($"{Endpoints.ScreeningsEndpoint}");
        Seats = await _client.GetFromJsonAsync<List<Seat>>($"{Endpoints.SeatsEndpoint}");
        // ... your existing code to fetch Staffs, Screenings, Seats ...

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;

        // If userEmail is null, then the user is likely not authenticated.
        if (string.IsNullOrEmpty(userEmail))
        {
            throw new InvalidOperationException("User is not authenticated.");
        }

        var allCustomers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Customers = allCustomers.Where(c => c.EmailAddress.Equals(userEmail, StringComparison.OrdinalIgnoreCase)).ToList();

        // If Customers list is empty or null, it means no customer record is associated with the logged-in user.
        if (Customers == null || !Customers.Any())
        {
            throw new InvalidOperationException("No customer record found for the logged-in user.");
        }

        // Assuming booking is a new instance if creating a new booking
        if (booking == null)
        {
            booking = new Booking { CustomerId = Customers.First().Id };
        }
    }


    }
