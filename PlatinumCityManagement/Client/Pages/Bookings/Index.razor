@page "/bookings/"
@inject HttpInterceptorService _interceptor
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Bookings</h3>
<input type="text" @bind-value="searchTerm" @bind-value:event="oninput" placeholder="Search by booking type" class="form-control mb-3" />

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Bookings
</a>
<br />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings..</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Staff name</th>
                <th>Customer name </th>
                <th>Booking Type</th>
                <th>Total Price</th>
                <th>No. of Seats</th>
                <th>Seat No.</th>
                <th>Date and Time</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings.Where(b => string.IsNullOrEmpty(searchTerm) || b.BookingType.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>@(booking.Staff?.Name)</td> <!-- Handle null -->
                    <td>@(booking.Customer?.Name)</td> <!-- Handle null-->
                    <td>@booking.BookingType</td>
                    <td>@booking.TotalPrice</td>
                    <td>@booking.SeatQty</td>
                    <td>@booking.SeatNo</td>
                    <td>@booking.BookingDateTime.Date.ToString("dd/MM/yyyy")</td>
                   
     

                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="(() => Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<Booking>? Bookings;
    private string searchTerm;

    protected async override Task OnInitializedAsync()

    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    async Task Delete(int bookingId)
    {
        if (Bookings != null)
        {
            var booking = Bookings.First(q => q.Id == bookingId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{booking.SeatNo}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}



