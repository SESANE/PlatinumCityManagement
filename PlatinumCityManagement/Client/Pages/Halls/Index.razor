@page "/halls/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Halls</h3>

<br />
<a href="/halls/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Hall
</a>
<br />
<br />

@if (Halls == null)
{
	<div class="alert alert-info">Loading Halls...</div>
}
else
{
	<table class="table table-dark">
		<thead>
			<tr>
				<th>Hall Name</th>
				<th>Cinema Branch Name</th>
				<th>Screening Quality</th>
				<th>Capacity</th>
				<th>Available Seats</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var hall in Halls)
			{
				<tr>
					<td>@hall.Name</td>
					<td>@hall.CinemaBranch.Name</td>
					<td>@hall.ScreeningQuality</td>
					<td>@hall.Capacity</td>
					<td>
						@foreach (var seat in Seats)
						{
							if (seat.HallId == hall.Id && seat.SeatTaken == false)
							{
								count += 1;
							}
						}
						@count
					</td>
					<td>
						<a href="/halls/view/@hall.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/halls/edit/@hall.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(hall.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code{
	private List<Hall>? Halls;
	private List<Seat>? Seats;
	int count = 0;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Halls = await _client.GetFromJsonAsync<List<Hall>>($"{Endpoints.HallsEndpoint}");
		Seats = await _client.GetFromJsonAsync<List<Seat>>($"{Endpoints.SeatsEndpoint}");
	}

	async Task Delete(int hallId)
	{
		if(Halls != null)
		{
			var hall = Halls.First(q => q.Id == hallId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{hall.Name}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.HallsEndpoint}/{hallId}");
				await OnInitializedAsync();
			}
		}
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}