@inject HttpClient _client

<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Name: </label>
			<div>
				<InputText @bind-Value="@staff.Name" class="form-control" />
				<ValidationMessage For="@(() => staff.Name)" />
			</div>
			<label>Address: </label>
			<div>
				<InputText @bind-Value="@staff.Address" class="form-control" />
				<ValidationMessage For="@(() => staff.Address)" />
			</div>
			<label>Email Address: </label>
			<div>
				<InputText @bind-Value="@staff.EmailAddress" class="form-control" />
				<ValidationMessage For="@(() => staff.EmailAddress)" />
			</div>
			<label>Contact Number: </label>
			<div>
				<InputText @bind-Value="@staff.ContactNumber" class="form-control" />
				<ValidationMessage For="@(() => staff.ContactNumber)" />
			</div>
			<label>Role: </label>
			<div>
				<InputText @bind-Value="@staff.Role" class="form-control" />
				<ValidationMessage For="@(() => staff.Role)" />
			</div>
			<label>Performance Rating: </label>
			<div>
				<InputNumber @bind-Value="@staff.PerformanceRating" class="form-control" />
				<ValidationMessage For="@(() => staff.PerformanceRating)" />
			</div>
			<label>Cinema Branch: </label>
			<div>
				<InputSelect @bind-Value="@staff.CinemaBranchId" class="form-control">
					<option value="">-- Select Cinema Branch --</option>
					@if (CinemaBranches != null)
					{
						foreach (var cinemaBranch in CinemaBranches)
						{
							<option value="@cinemaBranch.Id">@cinemaBranch.Name</option>
						}
					}
				</InputSelect>
				<ValidationMessage For="@(() => staff.CinemaBranchId)" />
			</div>
		</div>
	</fieldset>
	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	<BackToList Target="staffs" />

</EditForm>

@code{
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Staff? staff { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<CinemaBranch>? CinemaBranches;

	protected async override Task OnInitializedAsync()
	{
		CinemaBranches = await _client.GetFromJsonAsync<List<CinemaBranch>>($"{Endpoints.CinemaBranchesEndpoint}");
	}
}