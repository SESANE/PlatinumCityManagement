@page "/movies/"

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Movies</h3>

@if (Movies == null)
{
<div class="alert alert-info">Loading Movies..</div>
}
else
{
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Title</th>
            <th>More</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var movie in Movies)
        {
            <tr>
                <td>@movie.Title</td>
                <td>
                    <a href="/movies/view/@movie.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/movies/edit/@movie.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="(() => Delete(movie.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

}

@code {
    private List<Movie>? Movies;

    protected async override Task OnInitializedAsync()

    {
        Movies = await _client.GetFromJsonAsync<List<Movie>>($"{Endpoints.MoviesEndpoint}");
    }

    async Task Delete(int movieId)
    {
        if (Movies != null)
        {
            var movie = Movies.First(q => q.Id == movieId);
            var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {movie.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.MoviesEndpoint}/{movieId}");
                await OnInitializedAsync();

            }
        }
    }

}
