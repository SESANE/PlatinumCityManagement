@page "/movies/"
@inject HttpInterceptorService _interceptor
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Movies</h3>
<input type="text" @bind-value="searchTerm" @bind-value:event="oninput" placeholder="Search by Title" class="form-control mb-3" />

<a href="/movies/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Movies
</a>
<br />
<br />

@if (Movies == null)
{
<div class="alert alert-info">Loading Movies..</div>
}
else
{
    <div class="movie-card-container">
        @foreach (var movie in Movies.Where(c => string.IsNullOrEmpty(searchTerm) || c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        {
            <div class="movie-card">
                <div class="movie-media">
                    <img src="@movie.Poster" alt="Movie Poster" />
                </div>
                <div class="movie-info">
                    <div class="movie-header">
                        <h2>@movie.Title</h2>
                        <div class="movie-meta">
                            <span>Duration: @movie.Duration</span>
                            <span>Rating: @movie.Rating</span>
                        </div>
                    </div>
                    <div class="movie-body">
                        <p>@movie.MovieDescription</p>
                        <p>Cast: @movie.Cast</p>
                        <p>Review: @movie.Review</p>
                    </div>
                    <div class="movie-footer">
                        <a href="/movies/view/@movie.Id" class="btn btn-primary">View</a>
                        <a href="/movies/edit/@movie.Id" class="btn btn-warning">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => Delete(movie.Id))">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Movie>? Movies;
    private string searchTerm;

    protected async override Task OnInitializedAsync()

    {
        Movies = await _client.GetFromJsonAsync<List<Movie>>($"{Endpoints.MoviesEndpoint}");
    }

    async Task Delete(int movieId)
    {
        if (Movies != null)
        {
            var movie = Movies.First(q => q.Id == movieId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{movie.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.MoviesEndpoint}/{movieId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}



